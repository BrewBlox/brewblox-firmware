resources:
  repositories:
    - repository: self
  containers:
    - container: compiler
      image: brewblox/firmware-compiler:amd-develop

pool:
  vmImage: "Ubuntu-20.04"

trigger:
  tags:
    include:
      - "*"
  branches:
    include:
      - "*"
pr:
  branches:
    include:
      - "*"

jobs:
  #########################################################
  # Tests
  #########################################################
  - job: Tests

    steps:
      - checkout: self
        submodules: recursive

      - script: bash build/compile-proto.sh
        target: compiler
        displayName: Compile proto

      - script: bash build/build-tests.sh
        target: compiler
        displayName: Build tests

      - script: bash build/run-tests-with-coverage.sh
        target: compiler
        displayName: Run tests

      - task: PublishCodeCoverageResults@1
        inputs:
          summaryFileLocation: build/coverage/coverage.xml
          codeCoverageTool: 'cobertura'

  #########################################################
  # Build Simulator AMD
  #########################################################
  - job: SimulatorAMD

    steps:
      - checkout: self
        submodules: recursive

      - script: bash build/compile-proto.sh
        target: compiler
        displayName: Compile proto

      - script: bash build/build-sim-amd.sh
        target: compiler
        displayName: Build executable

      - publish: build/target/brewblox-gcc
        artifact: SimulatorBinAMD

  #########################################################
  # Build Simulator ARM
  #########################################################
  # - job: SimulatorARM

  #   steps:
  #     - checkout: self
  #       submodules: recursive

  #     script: bash build/ compile-proto.sh
  #       target: compiler
  #       displayName: Compile proto

  #       # should not be run in compiler
  #     script: bash build/build-sim-arm.sh
  #       displayName: Build executable

  #     - publish: build/target/brewblox-gcc
  #       artifact: SimulatorBinARM

  #########################################################
  # Build Firmware P1
  #########################################################
  - job: FirmwareP1

    steps:
      - checkout: self
        submodules: recursive

      - script: bash build/compile-proto.sh
        target: compiler
        displayName: Compile proto

      - script: make -j APP=brewblox PLATFORM=p1
        target: compiler
        workingDirectory: build
        displayName: Build p1

      - publish: build/target/brewblox-p1
        artifact: FirmwareBinP1

  #########################################################
  # Build Firmware Photon
  #########################################################
  - job: FirmwarePhoton

    steps:
      - checkout: self
        submodules: recursive

      - script: bash build/compile-proto.sh
        target: compiler
        displayName: Compile proto

      - script: make -j APP=brewblox PLATFORM=photon
        target: compiler
        workingDirectory: build
        displayName: Build photon

      - publish: build/target/brewblox-photon
        artifact: FirmwareBinPhoton

  #########################################################
  # Deployment
  #########################################################
  - job: Deploy

    dependsOn:
      - Tests
      - SimulatorAMD
      # - SimulatorARM
      - FirmwareP1
      - FirmwarePhoton

    variables:
      # Variables imported from brewblox group:
      # DOCKER_USER
      # DOCKER_PASSWORD
      - group: brewblox
      - name: SIM_REPO
        value: brewblox/firmware-simulator
      - name: BIN_REPO
        value: brewblox/firmware-bin

    steps:
      - bash: |
          BRANCH=$(echo $(Build.SourceBranch) | grep -oP "^refs/heads/\K.*")
          TAG=$(echo $BRANCH | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          echo "##vso[task.setvariable variable=BRANCH]$BRANCH"
          echo "##vso[task.setvariable variable=TAG]$TAG"
        displayName: Export build variables

      - bash: echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USER) --password-stdin docker.io
        displayName: Docker login
        condition: and(succeeded(), variables.BRANCH)

      # Download all published artifacts
      - download: current

      # cp SimulatorBinARM/brewblox ${SRC}/brewblox-arm
      - bash: |
          set -e
          mkdir ${SRC}
          cp "$(Pipeline.Workspace)"/SimulatorBinAMD/brewblox ${SRC}/brewblox-amd
        displayName: Copy to firmware-simulator context
        env:
          SRC: docker/firmware-simulator/source

      # cp "$(Pipeline.Workspace)"/SimulatorBinARM/brewblox ${SRC}/brewblox-arm
      - bash: |
          set -e
          echo "$(Pipeline.Workspace)"/FirmwareBinPhoton/
          mkdir -p ${SRC}
          bash docker/copy-bin.sh
          cp "$(Pipeline.Workspace)"/SimulatorBinAMD/brewblox ${SRC}/brewblox-amd
          cp "$(Pipeline.Workspace)"/FirmwareBinP1/brewblox.bin ${SRC}/brewblox-p1.bin
          cp "$(Pipeline.Workspace)"/FirmwareBinPhoton/brewblox.bin ${SRC}/brewblox-photon.bin
        displayName: Copy to firmware-bin context
        env:
          SRC: docker/firmware-bin/source

      - bash: |
          docker build --tag $(BIN_REPO):$(TAG) firmware-bin
          docker push $(BIN_REPO):$(TAG)
        displayName: (firmware-bin) Build Docker image
        condition: and(succeeded(), variables['BRANCH'])
        workingDirectory: docker

      - bash: |
          docker build --tag $(SIM_REPO):$TAG firmware-simulator
          docker push $(SIM_REPO):$TAG
        displayName: (firmware-simulator) Build Docker image
        condition: and(succeeded(), variables['BRANCH'])
        workingDirectory: docker
