resources:
  repositories:
    - repository: self
  containers: 
    - container: compiler
      image: brewblox/firmware-compiler:latest

pool:
  vmImage: "Ubuntu-18.04"

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - '*'
pr:
  branches:
    include:
      - '*'

jobs:

  #########################################################
  # Tests
  #########################################################
  - job: Tests

    steps:
      - checkout: self
        submodules: recursive
      
      - bash: build/compile-proto.sh
        target: compiler
        displayName: Compile proto

      - bash: build/build-tests.sh
        target: compiler
        displayName: Build tests

      - bash: build/run-tests.sh
        target: compiler
        displayName: Run tests


  #########################################################
  # Build Simulator AMD
  #########################################################
  - job: SimulatorAMD

    steps:
      - checkout: self
        submodules: recursive

      - bash: build/compile-proto.sh
        target: compiler
        displayName: Compile proto

      - script: build/build-sim-amd.sh
        target: compiler
        displayName: Build executable

      - publish: build/target/brewblox-gcc
        artifact: SimulatorBinAMD


  #########################################################
  # Build Simulator ARM
  #########################################################
  # - job: SimulatorARM

  #   steps:
  #     - checkout: self
  #       submodules: recursive

  #     - bash: build/compile-proto.sh
  #       target: compiler
  #       displayName: Compile proto

  #       # should not be run in compiler
  #     - script: build/build-sim-arm.sh
  #       displayName: Build executable

  #     - publish: build/target/brewblox-gcc
  #       artifact: SimulatorBinARM


  #########################################################
  # Build Firmware P1
  #########################################################
  - job: FirmwareP1

    steps:
      - checkout: self
        submodules: recursive

      - bash: build/compile-proto.sh
        target: compiler
        displayName: Compile proto

      - script: make APP=brewblox PLATFORM=p1
        target: compiler
        workingDirectory: build
        displayName: Build p1

      - publish: build/target/brewblox-p1
        artifact: FirmwareBinP1


  #########################################################
  # Build Firmware Photon
  #########################################################
  - job: FirmwarePhoton

    steps:
      - checkout: self
        submodules: recursive

      - bash: build/compile-proto.sh
        target: compiler
        displayName: Compile proto

      - script: make APP=brewblox PLATFORM=photon
        target: compiler
        workingDirectory: build
        displayName: Build photon

      - publish: build/target/brewblox-photon
        artifact: FirmwareBinPhoton


  #########################################################
  # Deployment
  #########################################################
  - job: Deploy

    dependsOn:
      - Tests
      - SimulatorAMD
      # - SimulatorARM
      - FirmwareP1
      - FirmwarePhoton

    variables:
      # Variables imported from brewblox group:
      # DOCKER_USER
      # DOCKER_PASSWORD
      - group: brewblox
      - name: SIM_REPO
        value: brewblox/firmware-simulator
      - name: BIN_REPO
        value: brewblox/firmware-bin

    steps:
      - bash: |
          RELEASE=$(git describe --tags | grep "^[[:digit:]]*\.[[:digit:]]*\.[[:digit:]]$")
          BRANCH=$(echo $(Build.SourceBranch) | grep -oP "^refs/heads/\K.*")
          TAG=$(echo $BRANCH | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          echo "##vso[task.setvariable variable=RELEASE]$RELEASE"
          echo "##vso[task.setvariable variable=BRANCH]$BRANCH"
          echo "##vso[task.setvariable variable=TAG]$TAG"
        displayName: Export build variables

      - bash: echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USER) --password-stdin docker.io
        displayName: Docker login
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

      - bash: docker/enable-experimental.sh
        displayName: Enable experimental Docker features

      - bash: |
          curl -L -o ~/.docker/cli-plugins/docker-buildx --create-dirs ${BUILDX_URL}
          chmod a+x ~/.docker/cli-plugins/docker-buildx
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --use
          docker buildx inspect --bootstrap
        displayName: Prepare buildx
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        env:
          BUILDX_URL: https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64

      # Download all published artifacts
      - download: current

      # cp SimulatorBinARM/brewblox ${SRC}/brewblox-arm
      - bash: |
          set -e
          mkdir ${SRC}
          cp "$(Pipeline.Workspace)"/SimulatorBinAMD/brewblox ${SRC}/brewblox-amd
        displayName: Copy to firmware-simulator context
        env:
          SRC: docker/firmware-simulator/source

      # cp "$(Pipeline.Workspace)"/SimulatorBinARM/brewblox ${SRC}/brewblox-arm
      - bash: |
          set -e
          echo "$(Pipeline.Workspace)"/FirmwareBinPhoton/
          mkdir -p ${SRC}
          bash docker/copy-bin.sh
          cp "$(Pipeline.Workspace)"/SimulatorBinAMD/brewblox ${SRC}/brewblox-amd
          cp "$(Pipeline.Workspace)"/FirmwareBinP1/brewblox.bin ${SRC}/brewblox-p1.bin
          cp "$(Pipeline.Workspace)"/FirmwareBinPhoton/brewblox.bin ${SRC}/brewblox-photon.bin
        displayName: Copy to firmware-bin context
        env:
          SRC: docker/firmware-bin/source

      - bash: >
          docker buildx build
          --push
          --tag $(BIN_REPO):$(TAG)
          firmware-bin
        displayName: (firmware-bin) Deploy Docker images with branch tags
        condition: and(succeeded(), variables['BRANCH'], not(variables['RELEASE']))
        workingDirectory: docker

      - bash: >
          docker buildx build 
          --push
          --tag $(SIM_REPO):$TAG
          --tag $(SIM_REPO):rpi-$TAG
          --platform linux/amd64
          firmware-simulator
        displayName: (firmware-simulator) Deploy Docker images with branch tags
        condition: and(succeeded(), variables['BRANCH'], not(variables['RELEASE']))
        workingDirectory: docker

      # - bash: |
      #     bash push-local.sh $(SIM_REPO) newest-tag
      #     bash push-local.sh $(SIM_REPO) $(RELEASE)
      #     bash push-local.sh $(BIN_REPO) newest-tag
      #     bash push-local.sh $(BIN_REPO) $(RELEASE)
      #   displayName: Deploy Docker images with release tags
      #   condition: and(succeeded(), variables['RELEASE'])
      #   workingDirectory: docker
