## -*- Makefile -*-

CCC = gcc
CXX = g++
LD = g++
CFLAGS = -g
CCFLAGS = $(CFLAGS)
CXXFLAGS = $(CFLAGS)
RM = rm -f
RMDIR = rm -f -r
MKDIR = mkdir -p

TARGETDIR=build
TARGET=brewblox_test_runner

mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
mkfile_dir := $(dir $(mkfile_path))
remove_slash = $(patsubst %/,%,$1)
SOURCE_PATH = $(call remove_slash,$(abspath $(mkfile_dir)/../../..))

BUILD_PATH=$(TARGETDIR)/test
# Define the target directories. Nest 2 levels deep since we also include
# sources from libraries via ../core-common-lib

# Recursive wildcard function
rwildcard = $(wildcard $1$2) $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2))

# enumerates files in the filesystem and returns their path relative to the project root
# $1 the directory relative to the project root
# $2 the pattern to match, e.g. *.cpp
target_files = $(patsubst $(SOURCE_PATH)/%,%,$(call rwildcard,$(SOURCE_PATH)/$1,$2))

# here_files is a non-recursive file search. target_files is recursive.
here_files = $(patsubst $(SOURCE_PATH)/%,%,$(wildcard $(SOURCE_PATH)/$1/$2))

# add all tests
CPPSRC += $(call here_files,app/brewblox/test,*.cpp)

# add all objects the user can create
INCLUDE_DIRS += $(SOURCE_PATH)/app/brewblox/
CPPSRC += $(call here_files,app/brewblox/blox,*.cpp)

# add all lib source files
INCLUDE_DIRS += $(SOURCE_PATH)/lib/inc
CPPSRC += $(call here_files,lib/src,*.cpp)

# add all controlbox source files
INCLUDE_DIRS += $(SOURCE_PATH)/controlbox/src/
CPPSRC += $(call here_files,controlbox/src/cbox/,*.cpp)

# add protobuf includes generated by nanopb
CFLAGS += -isystem $(SOURCE_PATH)/app/brewblox/proto/cpp
CSRC += $(call here_files,app/brewblox/proto/cpp,*.c)

# add protobuf includes generated by google protobuf
CFLAGS += -isystem $(SOURCE_PATH)/app/brewblox/proto/test/cpp
CPPSRC += $(call here_files,app/brewblox/proto/test/cpp,*.cpp)

# add board files (tests use emulated hardware)
INCLUDE_DIRS += $(SOURCE_PATH)/platform/spark/modules/Board
CPPSRC += $(call here_files,platform/spark/modules/Board,*.cpp)

# add nanopb dependencies
INCLUDE_DIRS += $(SOURCE_PATH)/platform/spark/firmware/nanopb/nanopb
CSRC += $(call here_files,platform/spark/firmware/nanopb/nanopb,*.c)
# enable message id's
CFLAGS += -DPB_MSGID=1

INCLUDE_DIRS += $(SOURCE_PATH)/platform

# brewblox app specific implementations
CPPSRC += /app/brewblox/nanopb_callbacks.cpp
CPPSRC += /app/brewblox/BrewBlox.cpp
CPPSRC += /app/brewblox/AppTicks.cpp

# spark HAL includes
INCLUDE_DIRS += $(SOURCE_PATH)/platform/spark/firmware/hal/inc
INCLUDE_DIRS += $(SOURCE_PATH)/platform/spark/firmware/hal/shared
INCLUDE_DIRS += $(SOURCE_PATH)/platform/spark/firmware/services/inc
INCLUDE_DIRS += $(SOURCE_PATH)/platform/spark/firmware/hal/src/gcc
INCLUDE_DIRS += $(SOURCE_PATH)/platform/spark/firmware/hal/src/newhal
CPPSRC += /platform/spark/firmware/hal/src/gcc/gpio_hal.cpp
CPPSRC += /platform/spark/firmware/hal/src/gcc/eeprom_hal.cpp
CPPSRC += /platform/spark/firmware/hal/src/gcc/filesystem.cpp
CPPSRC += /platform/spark/firmware/communication/tests/catch/hal_stubs.cpp

CFLAGS += -DPLATFORM_ID=3

# include boost
ifeq ($(BOOST_ROOT),)
$(error BOOST_ROOT not set. Download boost and add BOOST_ROOT to your environment variables.)
endif
CPPFLAGS += -isystem $(BOOST_ROOT)

CFLAGS += $(patsubst %,-I%,$(INCLUDE_DIRS)) -I.
CFLAGS += -ffunction-sections -Wall


# Flag compiler error for [-Wdeprecated-declarations]
CFLAGS += -Werror=deprecated-declarations

# Generate dependency files automatically.
CFLAGS += -MD -MP -MF $@.d
CFLAGS += -DDEBUG_BUILD
# OSX includes sys/wait.h which defines "wait"
CFLAGS += -D_SYS_WAIT_H_ -D_SYS_WAIT_H

CPPFLAGS += -std=gnu++14
CFLAGS += -pthread

include $(SOURCE_PATH)/build/checkers.mk # sanitizer and gcov

# the following warnings can help find opportunities for impromevent in virtual functions
# Warn when virtual functions are overriden without override/override final specifier (requires gcc 5.1)
# CPPFLAGS += -Wsuggest-override
# Warn when functions and classes can be marked final
# CPPFLAGS += -Wsuggest-final-types
# CPPFLAGS += -Wsuggest-final-methods

# include google protobuf dependencies
CPPFLAGS += $(shell pkg-config --cflags protobuf)
LDFLAGS += $(shell pkg-config --libs protobuf)

# don't generate warnings for system headers
CFLAGS += -Wno-system-headers

GIT_VERSION = $(shell cd $(SOURCE_PATH); git rev-parse --short HEAD)
CFLAGS += -DGIT_VERSION="$(GIT_VERSION)"

CPPEXCLUDES += app/brewblox/blox/TouchSettingsBlock.cpp
CPPEXCLUDES += app/brewblox/blox/WiFiSettingsBlock.cpp

CSRC := $(filter-out $(CEXCLUDES),$(CSRC))
CPPSRC := $(filter-out $(CPPEXCLUDES),$(CPPSRC)) 

# Collect all object and dep files
ALLOBJ += $(addprefix $(BUILD_PATH), $(CSRC:.c=.o))
ALLOBJ += $(addprefix $(BUILD_PATH), $(CPPSRC:.cpp=.o))

ALLDEPS += $(addprefix $(BUILD_PATH), $(CSRC:.c=.o.d))
ALLDEPS += $(addprefix $(BUILD_PATH), $(CPPSRC:.cpp=.o.d))

all: runner

runner: $(TARGETDIR)/$(TARGET)

$(TARGETDIR)/$(TARGET) : $(BUILD_PATH) $(ALLOBJ)
	@echo Building target: $@
	$(MKDIR) $(dir $@)
	$(LD) $(CFLAGS) $(ALLOBJ) --output $@ $(LDFLAGS)
	@echo

$(BUILD_PATH): 
	$(MKDIR) $(BUILD_PATH)

# Tool invocations

# C compiler to build .o from .c in $(BUILD_DIR)
$(BUILD_PATH)%.o : $(SOURCE_PATH)/%.c
	@echo Building file: $<
	$(MKDIR) $(dir $@)
	$(CCC) $(CCFLAGS) -c -o $@ $<

# CPP compiler to build .o from .cpp in $(BUILD_DIR)
# Note: Calls standard $(CC) - gcc will invoke g++ as appropriate
$(BUILD_PATH)%.o : $(SOURCE_PATH)/%.cpp
	@echo Building file: $<
	$(MKDIR) $(dir $@)
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c -o $@ $<

# Other Targets
clean:	
	$(RM) $(ALLOBJ) $(ALLDEPS) $(TARGETDIR)/$(TARGET)
	$(RMDIR) $(TARGETDIR)
	$(RMDIR) $(SOURCE_PATH)/app/brewblox/proto/cpp
	$(RMDIR) $(SOURCE_PATH)/app/brewblox/proto/test
	@echo

# print variable by invoking make print-VARIABLE as VARIABLE = the_value_of_the_variable
print-%  : ; @echo $* = $($*)

.PHONY: all clean runner
.SECONDARY:

# Include auto generated dependency files
-include $(ALLDEPS)



