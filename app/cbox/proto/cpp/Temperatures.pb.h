/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8 at Mon Sep 18 12:21:14 2017. */

#ifndef PB_BLOX_TEMPERATURES_PB_H_INCLUDED
#define PB_BLOX_TEMPERATURES_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _blox_temperature {
    int16_t temp_t;
/* @@protoc_insertion_point(struct:blox_temperature) */
} blox_temperature;

typedef struct _blox_temperature_long {
    int32_t temp_long_t;
/* @@protoc_insertion_point(struct:blox_temperature_long) */
} blox_temperature_long;

typedef struct _blox_temperature_precise {
    int32_t temp_precise_t;
/* @@protoc_insertion_point(struct:blox_temperature_precise) */
} blox_temperature_precise;

/* Default values for struct fields */

/* Initializer values for message structs */
#define blox_temperature_init_default            {0}
#define blox_temperature_long_init_default       {0}
#define blox_temperature_precise_init_default    {0}
#define blox_temperature_init_zero               {0}
#define blox_temperature_long_init_zero          {0}
#define blox_temperature_precise_init_zero       {0}

/* Field tags (for use in manual encoding/decoding) */
#define blox_temperature_temp_t_tag              1
#define blox_temperature_long_temp_long_t_tag    1
#define blox_temperature_precise_temp_precise_t_tag 1

/* Struct field encoding specification for nanopb */
extern const pb_field_t blox_temperature_fields[2];
extern const pb_field_t blox_temperature_long_fields[2];
extern const pb_field_t blox_temperature_precise_fields[2];

/* Maximum encoded size of messages (where known) */
#define blox_temperature_size                    6
#define blox_temperature_long_size               6
#define blox_temperature_precise_size            6

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define TEMPERATURES_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
