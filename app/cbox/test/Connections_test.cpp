/*
 * Copyright 2018 BrewPi B.V.
 *
 * This file is part of BrewBlox.
 *
 * BrewBlox is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * BrewPi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with BrewPi.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "catch.hpp"
#include <cstdio>
#include "Connections.h"
#include "ConnectionsStringStream.h"
#include "DataStream.h"
#include <sstream>

// echo test function, copies input to output
void echo(cbox::DataIn& in, cbox::DataOut& out){
    in.push(out);
}

SCENARIO("Connections are generated by connection sources and managed by a connection pool"){
    GIVEN("A connection pool with a StringPairConnectionSource to generate new connections"){
        cbox::StringStreamConnectionSource source;
        cbox::ConnectionPool pool = {source};      

        auto echoFunction = std::function<void(cbox::DataIn&, cbox::DataOut&)>(echo);

        WHEN("No new connections are available. Calling map has no effect"){
            pool.process(echoFunction);
            CHECK(pool.size() == 0);
        }

        WHEN("A new connection is generated by the connection source"){
            std::stringstream in;
            std::stringstream out;
            source.add(in, out);

            THEN("it is added to the connection pool when map is called, and the map function is performed"){
                CHECK(pool.size() == 0);
                pool.process(echoFunction);
                CHECK(pool.size() == 1);

                AND_WHEN("New data is added to the connection it is processed when map is called"){
                    in << "test";
                    INFO(in.str());
                    pool.process(echoFunction);

                    CHECK(out.str() == "test");
                    CHECK(pool.size() == 1); // still only one connection

                    AND_WHEN("more data comes in, it is processed too"){
                        in << " some more";
                        pool.process(echoFunction);

                        CHECK(out.str() == "test some more");
                        CHECK(pool.size() == 1); // still only one connection
                    }
                }

                WHEN("the connection is disconnected, it is removed from the pool"){
                    pool.updateConnections();
                    CHECK(pool.size() == 1);
                    in << "should not arrive";
                    in.setstate(std::stringstream::badbit); // signals a disconnect
                    pool.process(echoFunction);
                    CHECK(pool.size() == 0);
                    CHECK(out.str() == "");
                }

                WHEN("A second connection is generated by the connection source"){
                    std::stringstream in2;
                    std::stringstream out2;
                    source.add(in2, out2);

                    THEN("it is added to the pool on the next update"){
                        CHECK(pool.size() == 1);
                        pool.updateConnections();
                        CHECK(pool.size() == 2);
                    }
                    
                    THEN("It is added in the map function automatically before it is executed"){
                        in2 << "conn 2 test";
                        CHECK(pool.size() == 1);
                        CHECK(out2.str() == "");
                        pool.process(echoFunction);
                        CHECK(pool.size() == 2);
                        CHECK(out2.str() == "conn 2 test");
                    }

                    AND_WHEN("Both connections disconnect, the pool is empty again"){
                        pool.updateConnections();
                        CHECK(pool.size() == 2);
                        in.setstate(std::stringstream::badbit); // signals a disconnect
                        in2.setstate(std::stringstream::badbit); // signals a disconnect
                        INFO("Bad1: " << in.bad());
                        INFO("Bad2: " << in2.bad());
                        pool.updateConnections();
                        CHECK(pool.size() == 0);
                    }
                }
            }
        }
    }
}

